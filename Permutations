class Solution:
    # @param num, a list of integer
    # @return a list of lists of integers
    def permute(self, num):
        n=len(num)
        result=[]
        visited=[False]*n
        self.helper(result,[],visited,num)
        return result
    
    def helper(self,result,temp,visited,num):
        if len(num)==len(temp):
            result.append(temp[:])
        for i in range (len(num)):
            if visited[i]==True:
                continue
            temp.append(num[i])
            visited[i]=True
            self.helper(result,temp,visited,num)
            visited[i]=False
            temp.pop()
            
# without visited

class Solution:
    # @param num, a list of integer
    # @return a list of lists of integers
    def permute(self, num):
        n=len(num)
        result=[]
        self.helper(result,[],num)
        return result
    
    def helper(self,result,temp,num):
        if len(num)==len(temp):
            result.append(temp[:])
        for i in range (len(num)):
            if num[i] in temp:
                continue
            temp.append(num[i])
            self.helper(result,temp,num)
            temp.pop()
